<?php

namespace App;

use Faker\Generator;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;
use Ramsey\Uuid\Uuid;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    use Notifiable;


    protected $table = 'users';

    public $incrementing = false;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($model){
           try{
               $model->id = Uuid::uuid4()->toString();
           }catch (UnsatisfiedDependencyException $e){
               abort(500, $e->getMessage());
           }
        });
    }

    public function verifyUser(){
        return $this->hasOne('App\VerifyEmail');
    }

    public function following(){
        return $this->hasMany(follow::class, 'guest_id', 'id');
    }

    public function follower(){
        return $this->hasMany(follow::class, 'owner_id', 'id');
    }

    public function getCreatedAtAttribute(){
        return date("F jS, Y", strtotime($this->attributes['created_at']));
    }


}
